{"version":3,"sources":["redux/actions.ts","redux/reducers.ts","theory/music/tone.tsx","theory/music/note.tsx","components/noteComponent.tsx","components/instruments/fretComponent.tsx","components/instruments/stringComponent.tsx","components/instruments/neckComponent.tsx","theory/instruments/strings/string.tsx","theory/music/voicing.tsx","theory/instruments/strings/fretting.tsx","theory/instruments/strings/neck.tsx","components/music/scaleComponent.tsx","theory/music/chord.tsx","theory/music/interval.tsx","theory/music/scale.tsx","components/music/chordComponent.tsx","components/music/toneComponent.tsx","components/mainComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NoteActions","noteAction","type","notes","appReducers","combineReducers","selectedNotes","state","action","Select","SelectEnd","selectState","Object","objectSpread","selectAction","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","note","value","console","log","err","return","Reset","Toggle","toggleState","toggleAction","add","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","AppStore","createStore","sharpNames","flatNames","Tone","classCallCheck","this","interval","flat","name","tones","selectedTones","_arr","keys","_i","length","parseInt","_arr2","_i2","toneNotes","map","t","toString","_arr3","_i3","tone","indexOf","FullMatch","PartialMatch","Note","Math","floor","input","names","i","substring","NoteComponent","onClick","selectedNote","_this","props","deselectNote","selectNote","selectedTone","react_default","a","createElement","style","border","borderRadius","textAlign","padding","fontSize","width","cursor","backgroundColor","PureComponent","ConnectedNote","connect","dispatch","FretComponent","borderBottom","fret","noteComponent","StringComponent","display","flexDirection","string","Frets","n","fretComponent_FretComponent","key","NeckComponent","neck","strings","s","stringComponent_StringComponent","String","root","frets","result","push","matchNote","getNote","Voicing","noteLookup","Fretting","Neck","roots","maxSpread","arguments","createClass","fretting","chord","currentFrettings","getFrets","currentOptions","newFrettings","c","cross","concat","valid","filter","f","voicing","convertToVoicing","precursor","newOptions","fretMin","fretMax","spreadMin","spreadMax","option","toConsumableArray","Guitar","parse","ScaleComponent","toggleScale","scale","fullMatch","partialMatch","color","ConnectedScale","ScaleListComponent","_PureComponent2","possibleConstructorReturn","getPrototypeOf","apply","inherits","flex","minHeight","overflow","scales","Chord","join","addInterval","chords","Power","Major","Minor","Diminished","SuspendedSecond","SuspendedFourth","MajorSeventh","MinorSeventh","DominantSeventh","MajorMinorSeventh","Scale","intervals","currentTone","BuildScale","Dorian","Phyrgian","Lydian","Mixolydian","Locrian","ChordComponent","toggleChord","ConnectedChord","ChordListComponent","ToneComponent","deselectTone","selectTone","ConnectedTone","ToneListComponent","_this2","call","MainComponent","BuildAllScales","BuildAllChords","frettings","GenerateFrettings","height","position","toneComponent_ToneListComponent","neckComponent_NeckComponent","margin","chordComponent_ChordListComponent","scaleComponent_ScaleListComponent","App","es","store","mainComponent_MainComponent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b61247b1.chunk.js","sourcesContent":["import { AnyAction } from \"redux\";\r\n\r\nexport type Actions = NoteActions;\r\n\r\nexport enum NoteActions {\r\n    Hover,\r\n    HoverEnd,\r\n    Select,\r\n    SelectEnd,\r\n    Reset,\r\n    Toggle,\r\n}\r\n\r\nexport interface INoteAction {\r\n    type: NoteActions;\r\n    notes: number[];\r\n}\r\n\r\nexport function noteAction(type: NoteActions, notes: number[]): INoteAction {\r\n    return { type, notes };\r\n}","import { combineReducers, AnyAction, createStore } from 'redux';\r\nimport { NoteActions, INoteAction } from './actions';\r\n\r\nexport type INoteLookup = { [note: number]: number | boolean | undefined };\r\n\r\nexport interface IStringTheoryState {\r\n    selectedNotes: INoteLookup;\r\n    //hoveredNotes: INoteLookup;\r\n}\r\n\r\nfunction selectedNotes(state: INoteLookup | undefined, action: AnyAction): INoteLookup {\r\n    if (!state) { return {}; }\r\n    switch (action.type) {\r\n        case NoteActions.Select:\r\n        case NoteActions.SelectEnd:\r\n            let selectState = { ...state } as INoteLookup;\r\n            let selectAction = action as INoteAction;\r\n            for (let note of selectAction.notes) {\r\n                if (selectAction.type == NoteActions.Select) {\r\n                    console.log(\"adding note \" + note);\r\n                    selectState[note] = true;\r\n                }\r\n                else {\r\n                    console.log(\"deleting note \" + note);\r\n                    delete selectState[note];\r\n                }\r\n            }\r\n\r\n            console.log(selectState);\r\n            return selectState;\r\n        case NoteActions.Reset:\r\n            return {};\r\n        case NoteActions.Toggle:\r\n            let toggleState = { ...state } as INoteLookup;\r\n            let toggleAction = action as INoteAction;\r\n            let add = false;\r\n            // if all the notes being toggled are enabled, remove them all, otherwise add the remaining ones\r\n            for (let note of toggleAction.notes) {\r\n                if (!state[note]) {\r\n                    add = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            for (let note of toggleAction.notes) {\r\n                if (add) {\r\n                    toggleState[note] = true;\r\n                }\r\n                else {\r\n                    delete toggleState[note];\r\n                }\r\n            }\r\n            \r\n            return toggleState;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nconst appReducers = combineReducers<IStringTheoryState>({\r\n    selectedNotes,\r\n});\r\n\r\nexport const AppStore = createStore(appReducers);","import React from 'react';\r\nimport { INoteLookup } from '../../redux/reducers';\r\n\r\nexport const sharpNames = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\r\nexport const flatNames =  [\"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\"];\r\n\r\nexport default class Tone {\r\n    public note: number;\r\n    constructor (note: number){\r\n        this.note = note % 12;\r\n    }\r\n\r\n    public addInterval(interval: number): Tone {\r\n        return new Tone(this.note + interval);\r\n    }\r\n\r\n    public static Parse(name: string): Tone {\r\n        throw \"todo\";\r\n    }\r\n\r\n    public toString(flat?: boolean){\r\n        const names = flat ? flatNames : sharpNames;\r\n        return names[this.note];\r\n    }\r\n\r\n    public static FullMatch(tones: Tone[], selectedNotes: INoteLookup): boolean {\r\n        let selectedTones: {[tone: number]: boolean} = {};\r\n        for(let note of Object.keys(selectedNotes)){\r\n            selectedTones[parseInt(note) % 12] = true;\r\n        }\r\n\r\n        // check if ALL tones in the chord are matched\r\n        for(let tone of tones){\r\n            if(!selectedTones[tone.note]){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    public static PartialMatch(tones: Tone[], selectedNotes: INoteLookup): boolean {\r\n        let selectedTones: {[tone: number]: boolean} = {};\r\n        for(let note of Object.keys(selectedNotes)){\r\n            selectedTones[parseInt(note) % 12] = true;\r\n        }\r\n\r\n        // ALL selected notes BELONG to the scale or chord\r\n        var toneNotes = tones.map(t => t.note.toString());\r\n        for(let tone of Object.keys(selectedTones)){\r\n            if(toneNotes.indexOf(tone) < 0){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public matchNote(note: number | null):boolean {\r\n        if(note == null){ return false; }\r\n        return this.note == (note % 12);\r\n    }\r\n\r\n    public static isMatch(tones: Tone[], selectedNotes: INoteLookup): boolean {\r\n        if(Tone.FullMatch(tones, selectedNotes)){\r\n            return true;\r\n        }\r\n\r\n        if(Tone.PartialMatch(tones, selectedNotes)){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}","import React from 'react';\r\nimport Tone, { sharpNames, flatNames } from './tone';\r\n\r\n// NOTE is simply a number\r\n// C0 is defined as 0\r\n// This aligns with standard MIDI notes\r\nexport default class Note {\r\n    public static toString(note: number): string {\r\n        return (new Tone(note).toString()) + Math.floor(note / 12);\r\n    }\r\n\r\n    public static toTone(note: number): Tone {\r\n        return new Tone(note);\r\n    }\r\n\r\n    public static parse(input: string): number {\r\n        let tone = -1;\r\n        let names = sharpNames;\r\n        if(input.indexOf(\"b\") >= 0){\r\n            names = flatNames;\r\n        }\r\n        for(let i = 0 ; i < names.length; i++){\r\n            if(input.indexOf(names[i]) == 0){\r\n                tone = i;\r\n            }\r\n        }\r\n\r\n        var register = parseInt(input.substring(names[tone].length));\r\n        return tone + (register*12);\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport Note from '../theory/music/note';\r\nimport { connect } from 'react-redux';\r\nimport { IStringTheoryState, INoteLookup } from '../redux/reducers';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { noteAction, NoteActions } from '../redux/actions';\r\n\r\nexport interface INoteProps {\r\n    note: number;\r\n    selectedNotes: INoteLookup;\r\n    selectNote: (note: number) => void;\r\n    deselectNote: (note: number) => void;\r\n}\r\n\r\nclass NoteComponent extends PureComponent<INoteProps> {\r\n    private onClick = () => {\r\n        const selectedNote = this.props.selectedNotes[this.props.note];\r\n        const selectedTone = this.props.selectedNotes[this.props.note % 12];\r\n        if (selectedNote) {\r\n            this.props.deselectNote(this.props.note);\r\n        }\r\n        else {\r\n            this.props.selectNote(this.props.note);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const selectedNote = this.props.selectedNotes[this.props.note];\r\n        const selectedTone = this.props.selectedNotes[this.props.note % 12];\r\n\r\n\r\n        return <div\r\n            onClick={this.onClick}\r\n            style={{\r\n                border: \"2px solid gray\",\r\n                borderRadius: \"30px\",\r\n                textAlign: \"center\",\r\n                padding: \"10px 5px\",\r\n                fontSize: \"15px\",\r\n                width: \"30px\",\r\n                cursor: \"pointer\",\r\n                backgroundColor: selectedNote ? \"green\" : (selectedTone ? \"lightblue\" : \"\"),\r\n            }}>\r\n            <span style={{ textAlign: \"center\" }}>{Note.toString(this.props.note)}</span>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: IStringTheoryState) => {\r\n    return { selectedNotes: state.selectedNotes };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        selectNote: (note: number) => dispatch(noteAction(NoteActions.Select, [note])),\r\n        deselectNote: (note: number) => dispatch(noteAction(NoteActions.SelectEnd, [note])),\r\n    };\r\n}\r\n\r\nconst ConnectedNote = connect(mapStateToProps, mapDispatchToProps)(NoteComponent);\r\n\r\nexport default ConnectedNote;","import React, { PureComponent } from 'react';\r\nimport NoteComponent from '../noteComponent';\r\n\r\nexport interface IFretProps {\r\n    fret: number;\r\n    note: number;\r\n}\r\n\r\nexport default class FretComponent extends PureComponent<IFretProps> {\r\n    render() {\r\n        let borderBottom = \"2px solid gray\";\r\n        let backgroundColor = \"\";\r\n\r\n        switch (this.props.fret) {\r\n            case 0:\r\n                borderBottom = \"4px solid black\";\r\n                break;\r\n            case 3:\r\n            case 5:\r\n            case 7:\r\n            case 9:\r\n            case 15:\r\n            case 17:\r\n                backgroundColor = \"#EEE\";\r\n                break;\r\n            case 12:\r\n                backgroundColor = \"#EEE\";\r\n                break;\r\n        }\r\n\r\n        return <div style={{\r\n            padding: \"5px\",\r\n            borderBottom,\r\n            backgroundColor,\r\n        }}>\r\n            <NoteComponent note={this.props.note} />\r\n        </div>\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport String from '../../theory/instruments/strings/string';\r\nimport FretComponent from './fretComponent';\r\n\r\nexport interface IStringProps {\r\n    string: String;\r\n}\r\n\r\nexport default class StringComponent extends PureComponent<IStringProps> {\r\n    render() {\r\n        return <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            {this.props.string.Frets().map((n, i) =>\r\n                <FretComponent key={i} note={n} fret={i} />\r\n            )}\r\n        </div>\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport { Neck } from '../../theory/instruments/strings/neck';\r\nimport StringComponent from './stringComponent';\r\n\r\nexport interface INeckProps {\r\n    neck: Neck;\r\n}\r\n\r\nexport default class NeckComponent extends PureComponent<INeckProps> {\r\n    render() {\r\n        return <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            {this.props.neck.strings.map((s, i) =>\r\n                <StringComponent key={i} string={s} />)}\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport Tone from '../../music/tone';\r\n\r\nexport default class String {\r\n    // The root NOTE of the open string\r\n    private root: number;\r\n    // The number of frets on the string\r\n    private frets: number;\r\n\r\n    constructor(root: number, frets: number) {\r\n        this.root = root;\r\n        this.frets = frets;\r\n    }\r\n\r\n    public Frets(): number[] {\r\n        var result: number[] = [];\r\n\r\n        for (let i = 0; i < this.frets; i++) {\r\n            result.push(i + this.root);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public getNote(fret: number): number | null {\r\n        if (fret > this.frets || fret < -1) {\r\n            throw \"not a valid fret!\";\r\n        }\r\n\r\n        if (fret == -1) {\r\n            return null;\r\n        }\r\n\r\n        return this.root + fret;\r\n    }\r\n\r\n    public getFrets(tones: Tone[]): number[] {\r\n        let frets = [ -1 ] as number[]; // add -1 just so we have that as an option?\r\n        for (let i = 0; i < this.frets; i++) {\r\n            for(let tone of tones){\r\n                if(tone.matchNote(this.getNote(i))){\r\n                    // only need to record the fret once\r\n                    // even if it matched... multiple tones? (this should never happen...)\r\n                    frets.push(i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return frets;\r\n    }\r\n}","import React from 'react';\r\nimport Tone from './tone';\r\nimport { INoteLookup } from '../../redux/reducers';\r\n\r\n// VOICING is a SET of NOTES\r\n// CHORD is a list of TONES\r\nexport default class Voicing {\r\n    public notes: number[];\r\n    public noteLookup: INoteLookup;\r\n\r\n    constructor(notes: number[]) {\r\n        this.notes = notes;\r\n        this.noteLookup = {} as INoteLookup;\r\n        for(let note of this.notes){\r\n            this.noteLookup[note] = true;\r\n        }\r\n    }\r\n\r\n    public Tones(): Tone[] {\r\n        return this.notes.map(n => new Tone(n));\r\n    }\r\n}","export default class Fretting {\r\n    // NECK SPECIFIC\r\n    public frets: number[]; // fret numbers, indexed by the string! -1 is not fretted!\r\n\r\n    constructor(frets: number[]) {\r\n        this.frets = frets;\r\n    }\r\n}","import React from 'react';\r\nimport String from './string';\r\nimport Note from '../../music/note';\r\nimport Instrument from '../instrument';\r\nimport Chord from '../../music/chord';\r\nimport Voicing from '../../music/voicing';\r\nimport Fretting from './fretting';\r\nimport Tone from '../../music/tone';\r\n\r\nexport class Neck implements Instrument {\r\n    // The root NOTES of the strings\r\n    public strings: String[];\r\n\r\n    // The number of frets on each string\r\n    private frets: number;\r\n\r\n    // Max spread between notes when creating a voicing\r\n    private maxSpread: number;\r\n\r\n    constructor(roots: number[], frets: number, maxSpread = 5) {\r\n        this.frets = frets;\r\n        this.strings = roots.map(root => new String(root, frets));\r\n        this.maxSpread = maxSpread;\r\n    }\r\n\r\n    // TODO: should voicings be a distinct SET or should they be simply a list?\r\n    convertToVoicing(fretting: Fretting): Voicing {\r\n        let notes = [] as number[];\r\n        for (let i = 0; i < this.strings.length; i++) {\r\n            let note = this.strings[i].getNote(fretting.frets[i]);\r\n            if (note != null) {\r\n                notes.push(note);\r\n            }\r\n        }\r\n\r\n        return new Voicing(notes);\r\n    }\r\n\r\n    GenerateFrettings(chord: Chord): Fretting[] {\r\n\r\n        // we want to ensure each FRETTING covers ALLL chord tones\r\n        // for each chord tone, get all locations on the neck where it is available?\r\n\r\n        // get all tones on all strings\r\n\r\n        var firstString = this.strings[0].getFrets(chord.tones);\r\n        let currentFrettings: number[][] = firstString.map(s => [s]);\r\n        for (let i = 1; i < this.strings.length; i++) {\r\n            let currentOptions = this.strings[i].getFrets(chord.tones);\r\n\r\n            // for the first one we need to like, convert the single array into an array of one item arrays\r\n            var newFrettings: number[][] = [];\r\n            for (let fretting of currentFrettings) {\r\n                let c = this.cross(fretting, currentOptions);\r\n                newFrettings = newFrettings.concat(c);\r\n            }\r\n\r\n            currentFrettings = newFrettings;\r\n        }\r\n\r\n        // combine them every possible way (s x f)\r\n        console.log(\"intial frettings: \" + currentFrettings.length);\r\n\r\n        // prune to get the valid ones that cover all tones\r\n        var frettings = currentFrettings.map(c => new Fretting(c));\r\n\r\n        var valid = frettings.filter(f => {\r\n            let voicing = this.convertToVoicing(f);\r\n\r\n            // use Full match requirement for the chord (e.g. all tones must be included)\r\n            var valid = Tone.FullMatch(chord.tones, voicing.noteLookup);\r\n            return valid;\r\n        })\r\n\r\n        console.log(\"valid frettings: \" + valid.length);\r\n\r\n        return valid;\r\n    }\r\n\r\n    cross(precursor: number[], newOptions: number[]): number[][] {\r\n        var cross = [] as number[][];\r\n\r\n        // MAX spread is across ALL non-0 or -1 frets\r\n        var fretMin = 100;\r\n        var fretMax = -100;\r\n        for (let fret of precursor) {\r\n            if (fret > 0) {\r\n                if (fret > fretMax) { fretMax = fret; }\r\n                if (fret < fretMin) { fretMin = fret; }\r\n            }\r\n        }\r\n\r\n        // create the outer bounds of the fretting shape\r\n        var spreadMin = fretMax - this.maxSpread;\r\n        var spreadMax = fretMin + this.maxSpread;\r\n\r\n        // append each one of the new options to the prefix portion in turn\r\n        for (let option of newOptions) {\r\n            if (option <= 0 || (option >= spreadMin && option <= spreadMax)) {\r\n                cross.push([...precursor, option]);\r\n            }\r\n        }\r\n\r\n        return cross;\r\n    }\r\n\r\n    GenerateVoicings(chord: Chord): Voicing[] {\r\n        var voicings = [] as Voicing[];\r\n\r\n        // chord has a set of TONES\r\n        // for each string get a set of \r\n\r\n        return voicings;\r\n    }\r\n\r\n    GenerateAllVoicings(): Voicing[] {\r\n        throw \"this might be a bad idea?\";\r\n    }\r\n}\r\n\r\nexport const Guitar = new Neck([\r\n    Note.parse(\"E2\"),\r\n    Note.parse(\"A2\"),\r\n    Note.parse(\"D3\"),\r\n    Note.parse(\"G3\"),\r\n    Note.parse(\"B3\"),\r\n    Note.parse(\"E4\"),\r\n], 15, 6);\r\n\r\nexport const Bass = new Neck([\r\n    Note.parse(\"E1\"),\r\n    Note.parse(\"A1\"),\r\n    Note.parse(\"D2\"),\r\n    Note.parse(\"G2\"),\r\n], 24, 4);","import React, { PureComponent, Dispatch } from 'react';\r\nimport Scale from '../../theory/music/scale';\r\nimport { IStringTheoryState, INoteLookup } from '../../redux/reducers';\r\nimport { AnyAction } from 'redux';\r\nimport { noteAction, NoteActions } from '../../redux/actions';\r\nimport { connect } from 'react-redux';\r\nimport Tone from '../../theory/music/tone';\r\n\r\nexport interface IScaleProps {\r\n    scale: Scale;\r\n    selectedNotes: INoteLookup;\r\n    toggleScale: (notes: number[]) => void;\r\n}\r\n\r\nclass ScaleComponent extends PureComponent<IScaleProps> {\r\n    private onClick = () => {\r\n        this.props.toggleScale(this.props.scale.tones.map(t => t.note));\r\n    }\r\n\r\n    render() {\r\n        const fullMatch = Tone.FullMatch(this.props.scale.tones, this.props.selectedNotes);\r\n        const partialMatch = Tone.PartialMatch(this.props.scale.tones, this.props.selectedNotes);\r\n\r\n        return (\r\n            (fullMatch || partialMatch) ?\r\n                <div\r\n                    onClick={this.onClick}\r\n                    style={{\r\n                        cursor: \"pointer\",\r\n                        color: fullMatch ? \"green\" : \"\",\r\n                    }} >\r\n                    {this.props.scale.toString()}\r\n                </div>\r\n                : null);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: IStringTheoryState) => {\r\n    return { selectedNotes: state.selectedNotes };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        toggleScale: (notes: number[]) => dispatch(noteAction(NoteActions.Toggle, notes)),\r\n    };\r\n}\r\n\r\nconst ConnectedScale = connect(mapStateToProps, mapDispatchToProps)(ScaleComponent);\r\n\r\nexport default ConnectedScale;\r\n\r\nexport interface IScaleListProps {\r\n    scales: Scale[];\r\n}\r\n\r\nexport class ScaleListComponent extends PureComponent<IScaleListProps>{\r\n    render() {\r\n        return <div style={{ flex: 1, minHeight: \"33%\", display: \"flex\", flexDirection: \"column\", overflow: \"auto\" }}>\r\n            <h3 style={{ flex: \"none\" }}>Scales</h3>\r\n            <div style={{ overflow: \"auto\", flex: \"auto\" }}>\r\n                {this.props.scales.map((scale, i) => <ConnectedScale key={i} scale={scale} />)}\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import React from 'react';\r\nimport Tone from './tone';\r\nimport { MajorThird, Fifth, MinorThird, MajorSecond, Fourth, DiminishedFifth, MajorSeventh, MinorSeventh } from './interval';\r\n\r\n// Chords are a set of TONES\r\n// The first TONE is considered the root\r\n// For other tones, should be \"3rd\"-type, followed by \"5th\"-type and then any extensions or additional notes after that\r\nexport default class Chord {\r\n    private name?: string;\r\n    public tones: Tone[];\r\n\r\n    constructor(tones: Tone[], name?: string) {\r\n        this.tones = tones;\r\n        this.name = name;\r\n    }\r\n\r\n    public toString(flat?: boolean): string {\r\n        return this.tones[0].toString() + \" \" + this.name + \": \" + this.tones.map(t => t.toString(flat)).join(\",\");\r\n    }\r\n\r\n    // Basic triads \r\n    public static Major(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(MajorThird), root.addInterval(Fifth)], \"Maj\");\r\n    }\r\n\r\n    public static Minor(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(MinorThird), root.addInterval(Fifth)], \"Min\");\r\n    }\r\n    \r\n    public static Diminished(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(MinorThird), root.addInterval(DiminishedFifth)], \"Dim\");\r\n    }\r\n\r\n    // Suspended chords\r\n    public static SuspendedSecond(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(MajorSecond), root.addInterval(Fifth)], \"Sus2\");\r\n    }\r\n    \r\n    public static SuspendedFourth(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(Fourth), root.addInterval(Fifth)], \"Sus4\");\r\n    }\r\n\r\n    // Basic Four Note chords\r\n    public static MajorSeventh(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(MajorThird), root.addInterval(Fifth), root.addInterval(MajorSeventh)], \"Maj7\");\r\n    }\r\n\r\n    public static MinorSeventh(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(MinorThird), root.addInterval(Fifth), root.addInterval(MinorSeventh)], \"Min7\");\r\n    }\r\n    \r\n    public static DominantSeventh(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(MajorThird), root.addInterval(Fifth), root.addInterval(MinorSeventh)], \"Dom7\");\r\n    }\r\n    \r\n    public static MajorMinorSeventh(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(MinorThird), root.addInterval(Fifth), root.addInterval(MajorSeventh)], \"Mm7\");\r\n    }\r\n\r\n    // Extension chords\r\n    // TODO: how should we make the basic chords?\r\n    // How many base chords should we use for extensions?\r\n\r\n    // Basic Two Note Chords\r\n    public static Power(root: Tone): Chord {\r\n        return new Chord([root, root.addInterval(Fifth)], \"5\");\r\n    }\r\n\r\n    public static BuildAllChords(): Chord[] {\r\n        let chords: Chord[] = [];\r\n\r\n        for (let i = 0; i < 12; i++) {\r\n            const tone = new Tone(i);\r\n            chords.push(Chord.Power(tone));\r\n\r\n            chords.push(Chord.Major(tone));\r\n            chords.push(Chord.Minor(tone));\r\n\r\n            chords.push(Chord.Diminished(tone));\r\n            chords.push(Chord.SuspendedSecond(tone));\r\n            chords.push(Chord.SuspendedFourth(tone));\r\n            \r\n            chords.push(Chord.MajorSeventh(tone));\r\n            chords.push(Chord.MinorSeventh(tone));\r\n            chords.push(Chord.DominantSeventh(tone));\r\n            chords.push(Chord.MajorMinorSeventh(tone));\r\n        }\r\n\r\n        return chords;\r\n    }\r\n}","import React from 'react';\r\nimport * as tone from './tone';\r\n\r\nexport const Unison = 0;\r\n\r\nexport const MinorSecond = 1;\r\nexport const Half = 1;\r\nexport const MajorSecond = 2;\r\nexport const Whole = 2;\r\n\r\nexport const MinorThird = 3;\r\nexport const MajorThird = 4;\r\n\r\nexport const Fourth = 5;\r\n\r\nexport const Tritone = 6;\r\nexport const DiminishedFifth = 6;\r\n\r\nexport const Fifth = 7;\r\nexport const AugmentedFifth = 8;\r\n\r\nexport const MajorSixth = 9;\r\n\r\nexport const MinorSeventh = 10;\r\nexport const MajorSeventh = 11;\r\n\r\nexport const Octave = 12;","import React, { PureComponent } from 'react';\r\nimport Tone from './tone';\r\nimport chord from './chord';\r\nimport { Whole as W, Half as h } from './interval';\r\nimport { INoteLookup } from '../../redux/reducers';\r\n\r\n// Scale is a set of TONES\r\n// Scale tones should be ORDERED\r\n// E.G. the 3rd of the scale is the 3rd item in the list\r\nexport default class Scale {\r\n    private name?: string;\r\n    public tones: Tone[];\r\n    constructor(tones: Tone[], name?: string) {\r\n        this.tones = tones;\r\n        this.name = name;\r\n    }\r\n\r\n    public Root(): string | undefined {\r\n        return this.tones[0].toString();\r\n    }\r\n\r\n    public Name(): string | undefined {\r\n        return this.name;\r\n    }\r\n\r\n    public toString(flat?: boolean){\r\n        return this.name + \": \" + this.tones.map(tone => tone.toString()).join(\",\");\r\n    }\r\n\r\n    public Triads(): chord[] {\r\n        let chords: chord[] = [];\r\n        for (let i = 0; i < this.tones.length; i++) {\r\n            chords.push(new chord([\r\n                this.tones[i],\r\n                this.tones[(i + 2) % this.tones.length],\r\n                this.tones[(i + 4) % this.tones.length],\r\n            ], (i + 1).toString()));\r\n        }\r\n\r\n        return chords;\r\n    }\r\n\r\n    public Quads(): chord[] {\r\n        let chords: chord[] = [];\r\n        for (let i = 0; i < this.tones.length; i++) {\r\n            chords.push(new chord([\r\n                this.tones[i],\r\n                this.tones[(i + 2) % this.tones.length],\r\n                this.tones[(i + 4) % this.tones.length],\r\n                this.tones[(i + 6) % this.tones.length],\r\n            ], (i + 1).toString()));\r\n        }\r\n\r\n        return chords;\r\n    }\r\n\r\n    private static BuildScale(intervals: number[], root: Tone, name?: string): Scale {\r\n        var tones: Tone[] = [];\r\n        let currentTone = root;\r\n        for (var i = 0; i < intervals.length; i++) {\r\n            tones.push(currentTone);\r\n            currentTone = currentTone.addInterval(intervals[i]);\r\n        }\r\n\r\n        return new Scale(tones, tones[0] + \" \" + name);\r\n    }\r\n\r\n    public static Major(root: Tone): Scale {\r\n        return this.BuildScale([W, W, h, W, W, W, h], root, \"Major\");\r\n    }\r\n\r\n    public static Minor(root: Tone): Scale {\r\n        return this.BuildScale([W, h, W, W, h, W, W], root, \"Minor\");\r\n    }\r\n\r\n    public static Dorian(root: Tone): Scale {\r\n        return this.BuildScale([W, h, W, W, W, h, W], root, \"Dorian\");\r\n    }\r\n\r\n    public static Phyrgian(root: Tone): Scale {\r\n        return this.BuildScale([h, W, W, W, h, W, W], root, \"Phyrgian\");\r\n    }\r\n\r\n    public static Lydian(root: Tone): Scale {\r\n        return this.BuildScale([W, W, W, h, W, W, h], root, \"Lydian\");\r\n    }\r\n\r\n    public static Mixolydian(root: Tone): Scale {\r\n        return this.BuildScale([W, W, h, W, W, h, W], root, \"Mixolydian\");\r\n    }\r\n    \r\n    public static Locrian(root: Tone): Scale {\r\n        return this.BuildScale([h, W, W, h, W, W, W], root, \"Locrian\");\r\n    }\r\n\r\n    public static BuildAllScales(): Scale[] {\r\n        var scales: Scale[] = [];\r\n\r\n        for(var i = 0; i < 12; i++){\r\n            const tone = new Tone(i);\r\n            scales.push(Scale.Major(tone));\r\n            scales.push(Scale.Minor(tone));\r\n            scales.push(Scale.Dorian(tone));\r\n            scales.push(Scale.Phyrgian(tone));\r\n            scales.push(Scale.Lydian(tone));\r\n            scales.push(Scale.Mixolydian(tone));\r\n            scales.push(Scale.Locrian(tone));\r\n        }\r\n\r\n        return scales;\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport Chord from '../../theory/music/chord';\r\nimport { INoteLookup, IStringTheoryState } from '../../redux/reducers';\r\nimport Tone from '../../theory/music/tone';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, AnyAction } from 'redux';\r\nimport { noteAction, NoteActions } from '../../redux/actions';\r\n\r\nexport interface IChordProps {\r\n    chord: Chord;\r\n    selectedNotes: INoteLookup;\r\n    toggleChord: (notes: number[]) => void;\r\n}\r\n\r\nclass ChordComponent extends PureComponent<IChordProps> {\r\n    private onClick = () => {\r\n        this.props.toggleChord(this.props.chord.tones.map(t => t.note));\r\n    }\r\n\r\n    render() {\r\n        const fullMatch = Tone.FullMatch(this.props.chord.tones, this.props.selectedNotes);\r\n        const partialMatch = Tone.PartialMatch(this.props.chord.tones, this.props.selectedNotes);\r\n\r\n        return (\r\n            (fullMatch || partialMatch) ?\r\n                <div\r\n                    onClick={this.onClick}\r\n                    style={{\r\n                        cursor: \"pointer\",\r\n                        color: fullMatch ? \"green\" : \"\",\r\n                    }}>\r\n                    {this.props.chord.toString()}\r\n                </div>\r\n                : null);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: IStringTheoryState) => {\r\n    return { selectedNotes: state.selectedNotes };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        toggleChord: (notes: number[]) => dispatch(noteAction(NoteActions.Toggle, notes)),\r\n    };\r\n}\r\n\r\nconst ConnectedChord = connect(mapStateToProps, mapDispatchToProps)(ChordComponent);\r\n\r\nexport default ConnectedChord;\r\n\r\nexport interface IChordListProps {\r\n    chords: Chord[];\r\n}\r\n\r\nexport class ChordListComponent extends PureComponent<IChordListProps>{\r\n    render() {\r\n        return <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\", overflow: \"auto\" }}>\r\n            <h3 style={{ flex: \"none\" }}>Chords</h3>\r\n            <div style={{ flex: \"auto\", overflow: \"auto\" }}>\r\n                {this.props.chords.map((chord, i) => <ConnectedChord key={i} chord={chord} />)}\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport Note from '../../theory/music/note';\r\nimport { connect } from 'react-redux';\r\nimport { IStringTheoryState, INoteLookup } from '../../redux/reducers';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { noteAction, NoteActions } from '../../redux/actions';\r\nimport Tone from '../../theory/music/tone';\r\n\r\nexport interface IToneProps {\r\n    tone: Tone;\r\n    selectedNotes: INoteLookup;\r\n    selectTone: (note: number) => void;\r\n    deselectTone: (note: number) => void;\r\n}\r\n\r\nclass ToneComponent extends PureComponent<IToneProps> {\r\n    private onClick = () => {\r\n        const selectedTone = this.props.selectedNotes[this.props.tone.note];\r\n        if (selectedTone) {\r\n            this.props.deselectTone(this.props.tone.note);\r\n        }\r\n        else {\r\n            this.props.selectTone(this.props.tone.note);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const selectedTone = this.props.selectedNotes[this.props.tone.note];\r\n        return <div\r\n            onClick={this.onClick}\r\n            style={{\r\n                border: \"2px solid gray\",\r\n                borderRadius: \"30px\",\r\n                textAlign: \"center\",\r\n                padding: \"10px 5px\",\r\n                fontSize: \"15px\",\r\n                width: \"30px\",\r\n                cursor: \"pointer\",\r\n                backgroundColor: selectedTone ? \"lightblue\" : \"\",\r\n            }}>\r\n            <span style={{ textAlign: \"center\" }}>{this.props.tone.toString()}</span>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: IStringTheoryState) => {\r\n    return { selectedNotes: state.selectedNotes };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        selectTone: (note: number) => dispatch(noteAction(NoteActions.Select, [note])),\r\n        deselectTone: (note: number) => dispatch(noteAction(NoteActions.SelectEnd, [note])),\r\n    };\r\n}\r\n\r\nconst ConnectedTone = connect(mapStateToProps, mapDispatchToProps)(ToneComponent);\r\n\r\nexport default ConnectedTone;\r\n\r\n\r\nexport class ToneListComponent extends PureComponent {\r\n    private tones: Tone[];\r\n    constructor(props: never) {\r\n        super(props);\r\n        this.tones = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            this.tones.push(new Tone(i));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <h3>Tones</h3>\r\n            {this.tones.map((tone, i) => <ConnectedTone key={i} tone={tone} />)}\r\n        </div>;\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport NeckComponent from './instruments/neckComponent';\r\nimport { Guitar } from '../theory/instruments/strings/neck';\r\nimport { ScaleListComponent } from './music/scaleComponent';\r\nimport Scale from '../theory/music/scale';\r\nimport Chord from '../theory/music/chord';\r\nimport { ChordListComponent } from './music/chordComponent';\r\nimport Tone from '../theory/music/tone';\r\nimport Voicing from '../theory/music/voicing';\r\nimport Fretting from '../theory/instruments/strings/fretting';\r\nimport { ToneListComponent } from './music/toneComponent';\r\n\r\nexport default class MainComponent extends PureComponent {\r\n    private scales: Scale[];\r\n    private chords: Chord[];\r\n    private neck = Guitar;\r\n    private frettings: Fretting[];\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.scales = Scale.BuildAllScales();\r\n        this.chords = Chord.BuildAllChords();\r\n        this.frettings = this.neck.GenerateFrettings(Chord.Major(new Tone(0)));\r\n    }\r\n    render() {\r\n        return <div style={{ display: \"flex\", flexDirection: \"row\", overflow: \"auto\", width: \"100%\", height: \"100%\", position: \"absolute\" }}>\r\n            <ToneListComponent />\r\n            <NeckComponent neck={this.neck} />\r\n\r\n            <div style={{ flex: \"auto\", display: \"flex\", flexDirection: \"column\" }}>\r\n                <div style={{ flex: \"none\", flexDirection: \"row\", display: \"flex\" }}>\r\n                    <h3 style={{ flex: \"none\" }}>Search</h3>\r\n                    <input type=\"text\" style={{ flex: \"auto\", margin: \"15px\" }} />\r\n                </div>\r\n                <ChordListComponent chords={this.chords} />\r\n                <ScaleListComponent scales={this.scales} />\r\n                <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\", overflow: \"auto\" }}>\r\n                    <h3 style={{ flex: \"none\" }}>Frettings</h3>\r\n                    <div style={{ flex: \"auto\", overflow: \"auto\" }}>\r\n                        {this.frettings.map((f, i) => <div key={i}>{f.frets.map(n => n == -1 ? \"x\" : n).join(\",\")}</div>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport './App.css';\r\nimport { AppStore } from './redux/reducers';\r\nimport MainComponent from './components/mainComponent';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={AppStore}>\r\n        <MainComponent />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}